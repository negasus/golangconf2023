// Code generated by goyacc -o ./parser/parser.go -p YY ./parser/parser.go.y. DO NOT EDIT.

//line ./parser/parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line ./parser/parser.go.y:2

import (
	"github.com/negasus/golangconf2023/ast"
)

//line ./parser/parser.go.y:13
type YYSymType struct {
	yys   int
	token *ast.Token

	stmt ast.Stmt
	expr ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const EQ = 57348
const PLUS = 57349
const MUL = 57350

var YYToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"EQ",
	"PLUS",
	"MUL",
}

var YYStatenames = [...]string{}

const YYEofCode = 1
const YYErrCode = 2
const YYInitialStackSize = 16

//line ./parser/parser.go.y:57

//line yacctab:1
var YYExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const YYPrivate = 57344

const YYLast = 12

var YYAct = [...]int8{
	5, 8, 9, 9, 7, 6, 3, 4, 2, 10,
	11, 1,
}

var YYPact = [...]int16{
	-1000, 2, -1000, 1, 0, -6, -1000, -1000, 0, 0,
	-5, -1000,
}

var YYPgo = [...]int8{
	0, 11, 8, 0,
}

var YYR1 = [...]int8{
	0, 1, 1, 2, 3, 3, 3, 3,
}

var YYR2 = [...]int8{
	0, 0, 2, 3, 1, 1, 3, 3,
}

var YYChk = [...]int16{
	-1000, -1, -2, 4, 6, -3, 5, 4, 7, 8,
	-3, -3,
}

var YYDef = [...]int8{
	1, -2, 2, 0, 0, 3, 4, 5, 0, 0,
	6, 7,
}

var YYTok1 = [...]int8{
	1,
}

var YYTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8,
}

var YYTok3 = [...]int8{
	0,
}

var YYErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	YYDebug        = 0
	YYErrorVerbose = false
)

type YYLexer interface {
	Lex(lval *YYSymType) int
	Error(s string)
}

type YYParser interface {
	Parse(YYLexer) int
	Lookahead() int
}

type YYParserImpl struct {
	lval  YYSymType
	stack [YYInitialStackSize]YYSymType
	char  int
}

func (p *YYParserImpl) Lookahead() int {
	return p.char
}

func YYNewParser() YYParser {
	return &YYParserImpl{}
}

const YYFlag = -1000

func YYTokname(c int) string {
	if c >= 1 && c-1 < len(YYToknames) {
		if YYToknames[c-1] != "" {
			return YYToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func YYStatname(s int) string {
	if s >= 0 && s < len(YYStatenames) {
		if YYStatenames[s] != "" {
			return YYStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func YYErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !YYErrorVerbose {
		return "syntax error"
	}

	for _, e := range YYErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + YYTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(YYPact[state])
	for tok := TOKSTART; tok-1 < len(YYToknames); tok++ {
		if n := base + tok; n >= 0 && n < YYLast && int(YYChk[int(YYAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if YYDef[state] == -2 {
		i := 0
		for YYExca[i] != -1 || int(YYExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; YYExca[i] >= 0; i += 2 {
			tok := int(YYExca[i])
			if tok < TOKSTART || YYExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if YYExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += YYTokname(tok)
	}
	return res
}

func YYlex1(lex YYLexer, lval *YYSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(YYTok1[0])
		goto out
	}
	if char < len(YYTok1) {
		token = int(YYTok1[char])
		goto out
	}
	if char >= YYPrivate {
		if char < YYPrivate+len(YYTok2) {
			token = int(YYTok2[char-YYPrivate])
			goto out
		}
	}
	for i := 0; i < len(YYTok3); i += 2 {
		token = int(YYTok3[i+0])
		if token == char {
			token = int(YYTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(YYTok2[1]) /* unknown char */
	}
	if YYDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", YYTokname(token), uint(char))
	}
	return char, token
}

func YYParse(YYlex YYLexer) int {
	return YYNewParser().Parse(YYlex)
}

func (YYrcvr *YYParserImpl) Parse(YYlex YYLexer) int {
	var YYn int
	var YYVAL YYSymType
	var YYDollar []YYSymType
	_ = YYDollar // silence set and not used
	YYS := YYrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	YYstate := 0
	YYrcvr.char = -1
	YYtoken := -1 // YYrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		YYstate = -1
		YYrcvr.char = -1
		YYtoken = -1
	}()
	YYp := -1
	goto YYstack

ret0:
	return 0

ret1:
	return 1

YYstack:
	/* put a state and value onto the stack */
	if YYDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", YYTokname(YYtoken), YYStatname(YYstate))
	}

	YYp++
	if YYp >= len(YYS) {
		nyys := make([]YYSymType, len(YYS)*2)
		copy(nyys, YYS)
		YYS = nyys
	}
	YYS[YYp] = YYVAL
	YYS[YYp].yys = YYstate

YYnewstate:
	YYn = int(YYPact[YYstate])
	if YYn <= YYFlag {
		goto YYdefault /* simple state */
	}
	if YYrcvr.char < 0 {
		YYrcvr.char, YYtoken = YYlex1(YYlex, &YYrcvr.lval)
	}
	YYn += YYtoken
	if YYn < 0 || YYn >= YYLast {
		goto YYdefault
	}
	YYn = int(YYAct[YYn])
	if int(YYChk[YYn]) == YYtoken { /* valid shift */
		YYrcvr.char = -1
		YYtoken = -1
		YYVAL = YYrcvr.lval
		YYstate = YYn
		if Errflag > 0 {
			Errflag--
		}
		goto YYstack
	}

YYdefault:
	/* default state action */
	YYn = int(YYDef[YYstate])
	if YYn == -2 {
		if YYrcvr.char < 0 {
			YYrcvr.char, YYtoken = YYlex1(YYlex, &YYrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if YYExca[xi+0] == -1 && int(YYExca[xi+1]) == YYstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			YYn = int(YYExca[xi+0])
			if YYn < 0 || YYn == YYtoken {
				break
			}
		}
		YYn = int(YYExca[xi+1])
		if YYn < 0 {
			goto ret0
		}
	}
	if YYn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			YYlex.Error(YYErrorMessage(YYstate, YYtoken))
			Nerrs++
			if YYDebug >= 1 {
				__yyfmt__.Printf("%s", YYStatname(YYstate))
				__yyfmt__.Printf(" saw %s\n", YYTokname(YYtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for YYp >= 0 {
				YYn = int(YYPact[YYS[YYp].yys]) + YYErrCode
				if YYn >= 0 && YYn < YYLast {
					YYstate = int(YYAct[YYn]) /* simulate a shift of "error" */
					if int(YYChk[YYstate]) == YYErrCode {
						goto YYstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if YYDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", YYS[YYp].yys)
				}
				YYp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if YYDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", YYTokname(YYtoken))
			}
			if YYtoken == YYEofCode {
				goto ret1
			}
			YYrcvr.char = -1
			YYtoken = -1
			goto YYnewstate /* try again in the same state */
		}
	}

	/* reduction by production YYn */
	if YYDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", YYn, YYStatname(YYstate))
	}

	YYnt := YYn
	YYpt := YYp
	_ = YYpt // guard against "declared and not used"

	YYp -= int(YYR2[YYn])
	// YYp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if YYp+1 >= len(YYS) {
		nyys := make([]YYSymType, len(YYS)*2)
		copy(nyys, YYS)
		YYS = nyys
	}
	YYVAL = YYS[YYp+1]

	/* consult goto table to find next state */
	YYn = int(YYR1[YYn])
	YYg := int(YYPgo[YYn])
	YYj := YYg + YYS[YYp].yys + 1

	if YYj >= YYLast {
		YYstate = int(YYAct[YYg])
	} else {
		YYstate = int(YYAct[YYj])
		if int(YYChk[YYstate]) != -YYn {
			YYstate = int(YYAct[YYg])
		}
	}
	// dummy call; replaced with literal code
	switch YYnt {

	case 1:
		YYDollar = YYS[YYpt-0 : YYpt+1]
//line ./parser/parser.go.y:28
		{
		}
	case 2:
		YYDollar = YYS[YYpt-2 : YYpt+1]
//line ./parser/parser.go.y:30
		{
			l := YYlex.(*Lexer)
			l.stmts = append(l.stmts, YYDollar[2].stmt)
		}
	case 3:
		YYDollar = YYS[YYpt-3 : YYpt+1]
//line ./parser/parser.go.y:36
		{
			YYVAL.stmt = &ast.AssignStmt{Ident: &ast.IdentExpr{Value: YYDollar[1].token.Value}, Expr: YYDollar[3].expr}
		}
	case 4:
		YYDollar = YYS[YYpt-1 : YYpt+1]
//line ./parser/parser.go.y:41
		{
			YYVAL.expr = &ast.NumberExpr{Value: YYDollar[1].token.Value}
		}
	case 5:
		YYDollar = YYS[YYpt-1 : YYpt+1]
//line ./parser/parser.go.y:45
		{
			YYVAL.expr = &ast.IdentExpr{Value: YYDollar[1].token.Value}
		}
	case 6:
		YYDollar = YYS[YYpt-3 : YYpt+1]
//line ./parser/parser.go.y:49
		{
			YYVAL.expr = &ast.ArithmeticOpExpr{Lhs: YYDollar[1].expr, Operator: "+", Rhs: YYDollar[3].expr}
		}
	case 7:
		YYDollar = YYS[YYpt-3 : YYpt+1]
//line ./parser/parser.go.y:53
		{
			YYVAL.expr = &ast.ArithmeticOpExpr{Lhs: YYDollar[1].expr, Operator: "*", Rhs: YYDollar[3].expr}
		}
	}
	goto YYstack /* stack new state and value */
}
